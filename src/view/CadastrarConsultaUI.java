/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import controller.ConsultaController;
import controller.MedicoController;
import controller.PacienteController;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Consulta;
import model.Medico;
import model.Paciente;

/**
 *
 * @author Lucas
 */
public class CadastrarConsultaUI extends javax.swing.JInternalFrame {

    /**
     * Creates new form CadastrarConsulta
     */
    private ArrayList<Paciente> listaPaciente;
    private ArrayList<Medico> listaMedico;
    private DefaultTableModel modelo, modeloMedico;
    private Consulta consultaAnt;
    
    public CadastrarConsultaUI(Consulta consulta) {
        initComponents();
        
        this.zerarModeloMedico();
        this.listaMedico = MedicoController.obterInstancia().listarMedico();
        
        this.zerarModeloPaciente();
        this.listaPaciente = PacienteController.obterInstancia().listarPaciente();
        
        if(consulta != null){
            consultaAnt = consulta;
            SimpleDateFormat sdf = new SimpleDateFormat("dd/mm/yyyy");
            JFTDataConsulta.setText(sdf.format(consulta.getData()));
            //JTAProcedimento.setText(consulta.getProcedimento()); Virou ComboBOX
            JTAObservacao.setText(consulta.getObservacao());
            
            for(int i=0; i < this.listaMedico.size();i++){
                if(consulta.getCodMedico().equals(this.listaMedico.get(i).getCrm())){
                     modeloMedico.addRow(new Object[] {this.listaMedico.get(i).getCrm(),
                                              this.listaMedico.get(i).getNome()});
    }
            }

            for(int y=0; y< this.listaPaciente.size();y++){
                if(consulta.getCodPaciente().equals(this.listaPaciente.get(y).getCodigo())){
                    modelo.addRow(new Object[] {this.listaPaciente.get(y).getCodigo(),
                                              this.listaPaciente.get(y).getNome()});
                }
            }
           
            JTabelaMedico.setModel(modeloMedico);
            JTabelaPaciente.setModel(modelo);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPPainelPrincipal = new javax.swing.JPanel();
        JPainelPaciente = new javax.swing.JPanel();
        JLNomePaciente = new javax.swing.JLabel();
        JTFNomePaciente = new javax.swing.JTextField();
        JBProcurarPaciente = new javax.swing.JButton();
        JLCodigoPaciente = new javax.swing.JLabel();
        JTFCodigoPaciente = new javax.swing.JTextField();
        JSPPaciente = new javax.swing.JScrollPane();
        JTabelaPaciente = new javax.swing.JTable();
        JLDataConsulta = new javax.swing.JLabel();
        JFTDataConsulta = new javax.swing.JFormattedTextField();
        JLProcedimento = new javax.swing.JLabel();
        JCBProcedimento = new javax.swing.JComboBox();
        JPainelMedico = new javax.swing.JPanel();
        JLNomeMedico = new javax.swing.JLabel();
        JTFNomeMedico = new javax.swing.JTextField();
        JBProcurarMedico = new javax.swing.JButton();
        JLCRMedico = new javax.swing.JLabel();
        JTFCRM = new javax.swing.JTextField();
        JSPMedico = new javax.swing.JScrollPane();
        JTabelaMedico = new javax.swing.JTable();
        JLMedico = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTAObservacao = new javax.swing.JTextArea();
        JBSalvar = new javax.swing.JButton();
        JBCancelar = new javax.swing.JButton();

        setClosable(true);

        JPPainelPrincipal.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cadastro de Consulta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        JPainelPaciente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Paciente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        JLNomePaciente.setText("Nome do Paciente :");

        JBProcurarPaciente.setText("Procurar");
        JBProcurarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBProcurarPacienteActionPerformed(evt);
            }
        });

        JLCodigoPaciente.setText("Codigo Paciente :");

        JTabelaPaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Codigo", "Nome do Paciente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        JTabelaPaciente.getTableHeader().setReorderingAllowed(false);
        JSPPaciente.setViewportView(JTabelaPaciente);
        JTabelaPaciente.getColumnModel().getColumn(0).setMinWidth(100);
        JTabelaPaciente.getColumnModel().getColumn(0).setMaxWidth(200);

        javax.swing.GroupLayout JPainelPacienteLayout = new javax.swing.GroupLayout(JPainelPaciente);
        JPainelPaciente.setLayout(JPainelPacienteLayout);
        JPainelPacienteLayout.setHorizontalGroup(
            JPainelPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPainelPacienteLayout.createSequentialGroup()
                .addContainerGap(303, Short.MAX_VALUE)
                .addComponent(JBProcurarPaciente)
                .addContainerGap())
            .addGroup(JPainelPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(JPainelPacienteLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(JPainelPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(JSPPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                        .addGroup(JPainelPacienteLayout.createSequentialGroup()
                            .addGroup(JPainelPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(JLNomePaciente)
                                .addComponent(JLCodigoPaciente))
                            .addGap(18, 18, 18)
                            .addGroup(JPainelPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(JTFNomePaciente)
                                .addGroup(JPainelPacienteLayout.createSequentialGroup()
                                    .addComponent(JTFCodigoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 167, Short.MAX_VALUE)))))
                    .addContainerGap()))
        );
        JPainelPacienteLayout.setVerticalGroup(
            JPainelPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPainelPacienteLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(JBProcurarPaciente)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(JPainelPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(JPainelPacienteLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(JPainelPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JLNomePaciente)
                        .addComponent(JTFNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(9, 9, 9)
                    .addGroup(JPainelPacienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JLCodigoPaciente)
                        .addComponent(JTFCodigoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(JSPPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        JLDataConsulta.setText("Data da Consulta :");

        try {
            JFTDataConsulta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        JLProcedimento.setText("Procedimento:");

        JCBProcedimento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        JPainelMedico.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Médico", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        JLNomeMedico.setText("Nome do Médico:");

        JBProcurarMedico.setText("Procurar");
        JBProcurarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBProcurarMedicoActionPerformed(evt);
            }
        });

        JLCRMedico.setText("CRM:");

        JTabelaMedico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Codigo", "Nome do Paciente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JSPMedico.setViewportView(JTabelaMedico);
        JTabelaMedico.getColumnModel().getColumn(0).setMinWidth(100);
        JTabelaMedico.getColumnModel().getColumn(0).setMaxWidth(200);

        javax.swing.GroupLayout JPainelMedicoLayout = new javax.swing.GroupLayout(JPainelMedico);
        JPainelMedico.setLayout(JPainelMedicoLayout);
        JPainelMedicoLayout.setHorizontalGroup(
            JPainelMedicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPainelMedicoLayout.createSequentialGroup()
                .addContainerGap(303, Short.MAX_VALUE)
                .addComponent(JBProcurarMedico)
                .addContainerGap())
            .addGroup(JPainelMedicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(JPainelMedicoLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(JPainelMedicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(JSPMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(JPainelMedicoLayout.createSequentialGroup()
                            .addGroup(JPainelMedicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(JLNomeMedico)
                                .addComponent(JLCRMedico))
                            .addGap(18, 18, 18)
                            .addGroup(JPainelMedicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(JTFNomeMedico, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                                .addGroup(JPainelMedicoLayout.createSequentialGroup()
                                    .addComponent(JTFCRM, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 178, Short.MAX_VALUE)))))
                    .addContainerGap()))
        );
        JPainelMedicoLayout.setVerticalGroup(
            JPainelMedicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPainelMedicoLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(JBProcurarMedico)
                .addContainerGap(155, Short.MAX_VALUE))
            .addGroup(JPainelMedicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(JPainelMedicoLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(JPainelMedicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JLNomeMedico)
                        .addComponent(JTFNomeMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(9, 9, 9)
                    .addGroup(JPainelMedicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JLCRMedico)
                        .addComponent(JTFCRM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(JSPMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        JLMedico.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        JLMedico.setText("Observações:");

        JTAObservacao.setColumns(20);
        JTAObservacao.setRows(5);
        jScrollPane1.setViewportView(JTAObservacao);

        javax.swing.GroupLayout JPPainelPrincipalLayout = new javax.swing.GroupLayout(JPPainelPrincipal);
        JPPainelPrincipal.setLayout(JPPainelPrincipalLayout);
        JPPainelPrincipalLayout.setHorizontalGroup(
            JPPainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPPainelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPPainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(JPPainelPrincipalLayout.createSequentialGroup()
                        .addGroup(JPPainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(JPPainelPrincipalLayout.createSequentialGroup()
                                .addGroup(JPPainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JPainelPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(JPPainelPrincipalLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(JLDataConsulta)
                                        .addGap(18, 18, 18)
                                        .addComponent(JFTDataConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(JPPainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(JPPainelPrincipalLayout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(JLProcedimento)
                                        .addGap(18, 18, 18)
                                        .addComponent(JCBProcedimento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(JPPainelPrincipalLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(JPainelMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(JLMedico))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        JPPainelPrincipalLayout.setVerticalGroup(
            JPPainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPPainelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPPainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLDataConsulta)
                    .addComponent(JFTDataConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLProcedimento)
                    .addComponent(JCBProcedimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(JPPainelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JPainelMedico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JPainelPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JLMedico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                .addContainerGap())
        );

        JBSalvar.setText("Salvar");
        JBSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBSalvarActionPerformed(evt);
            }
        });

        JBCancelar.setText("Cancelar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(321, Short.MAX_VALUE)
                .addComponent(JBSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(365, 365, 365))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JPPainelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JPPainelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBSalvar)
                    .addComponent(JBCancelar))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBProcurarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBProcurarPacienteActionPerformed
       this.zerarModeloPaciente();
       try{
       JTabelaPaciente.setModel(verificarPaciente(modelo));
       }catch(Exception e){
           JOptionPane.showMessageDialog(this, "Erro: "+e.getMessage(),"ERRO",0);
       }
    }//GEN-LAST:event_JBProcurarPacienteActionPerformed

    private void JBProcurarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBProcurarMedicoActionPerformed
       this.zerarModeloMedico();
       try{
       JTabelaMedico.setModel(verificarMedico(modeloMedico));
       }catch(Exception e){
           JOptionPane.showMessageDialog(this, "Erro: "+e.getMessage(),"ERRO",0);
       }
    }//GEN-LAST:event_JBProcurarMedicoActionPerformed

    private void JBSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBSalvarActionPerformed
        try{
            if(consultaAnt != null){
                int linhaMedico = JTabelaMedico.getSelectedRow();
                int linhaPaciente = JTabelaPaciente.getSelectedRow();
                try{
                    consultaAnt.setCodMedico((int) modeloMedico.getValueAt(linhaMedico,0));
                    consultaAnt.setCodPaciente((int) modelo.getValueAt(linhaPaciente,0));
                }catch(Exception e){}
                
                try{
                    // Manipulação da Data 
                    Date data;
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/mm/yyyy");
                    data = (Date) sdf.parse(JFTDataConsulta.getText());
                    consultaAnt.setData(data);
                }catch(Exception e){}
                
                // consultaAnt.setProcedimento(JTAProcedimento.getText()); Virou ComboBox
                consultaAnt.setObservacao(JTAObservacao.getText());
                
                ConsultaController.obterInstancia().alterar(consultaAnt);
                
            }else{
                Consulta consulta = new Consulta();
                // Obtenção das Linhas
                int linhaMedico = JTabelaMedico.getSelectedRow();
                int linhaPaciente = JTabelaPaciente.getSelectedRow();

               // Obtem os dados pela linha selecionada
                try{
                    consulta.setCodMedico((int) modeloMedico.getValueAt(linhaMedico,0));
                    consulta.setCodPaciente((int) modelo.getValueAt(linhaPaciente,0));
                }catch(Exception e){}
                
               // consulta.setProcedimento(JTAProcedimento.getText()); Virou ComboBox
                consulta.setObservacao(JTAObservacao.getText());

                try{
                    // Manipulação da Data 
                    Date data;
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/mm/yyyy");
                    data = (Date) sdf.parse(JFTDataConsulta.getText());
                    consulta.setData(data);
                }catch(Exception e){}

                    ConsultaController.obterInstancia().cadastrar(consulta);
            }           
            JOptionPane.showMessageDialog(this, "Cadastrado com sucesso !");
            this.dispose();            
        }catch(Exception e){
           JOptionPane.showMessageDialog(this, "Erro: "+e.getMessage(),"ERRO",0);
        }
    }//GEN-LAST:event_JBSalvarActionPerformed
            
    private DefaultTableModel verificarPaciente(DefaultTableModel modelo) throws Exception{
       String nome = JTFNomePaciente.getText();
       Integer codigo;
       try{
           codigo = Integer.parseInt(JTFCodigoPaciente.getText());
       }catch(Exception e){
           codigo = 0;
       }

       for(int i=0;i< this.listaPaciente.size(); i++){
          if(!nome.isEmpty() && codigo != 0){
              if(this.listaPaciente.get(i).getCodigo() == codigo && 
                       !this.listaPaciente.get(i).getNome().equals(nome)){
                  throw new Exception("Codigo e nome diferentes !!");
              }
       
              if(this.listaPaciente.get(i).getCodigo().equals(codigo)){
                  modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                              this.listaPaciente.get(i).getNome()});
              }              
          }else
          if(!nome.isEmpty() && codigo == 0){
              if(this.listaPaciente.get(i).getNome().contains(nome)){
                  modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                              this.listaPaciente.get(i).getNome()});
              }
          }else
          if(nome.isEmpty() && codigo != 0){
              if(this.listaPaciente.get(i).getCodigo().equals(codigo)){
                  modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                              this.listaPaciente.get(i).getNome()}); 
              }
          }else
          if(nome.isEmpty() && codigo ==0){
               modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                              this.listaPaciente.get(i).getNome()}); 
          }
       }
       
       return modelo;
    }
       
    private DefaultTableModel verificarMedico(DefaultTableModel modelo) throws Exception{
       String nome = JTFNomeMedico.getText();
       Integer codigo;
       try{
           codigo = Integer.parseInt(JTFCRM.getText());
       }catch(Exception e){
           codigo = 0;
       }
    
       for(int i=0;i< this.listaMedico.size(); i++){
          if(!nome.isEmpty() && codigo != 0){
              if(this.listaMedico.get(i).getCrm() == codigo && 
                       !this.listaMedico.get(i).getNome().equals(nome)){
                  throw new Exception("Codigo e nome diferentes !!");
              }
       
              if(this.listaMedico.get(i).getCrm()== codigo){
                  modelo.addRow(new Object[] {this.listaMedico.get(i).getCrm(),
                                              this.listaMedico.get(i).getNome()});
              }              
          }else
          if(!nome.isEmpty() && codigo == 0){
              if(this.listaMedico.get(i).getNome().contains(nome)){
                  modelo.addRow(new Object[] {this.listaMedico.get(i).getCrm(),
                                              this.listaMedico.get(i).getNome()});
              }
          }else
          if(nome.isEmpty() && codigo != 0){
              if(this.listaMedico.get(i).getCrm() == codigo){
                  modelo.addRow(new Object[] {this.listaMedico.get(i).getCrm(),
                                              this.listaMedico.get(i).getNome()}); 
              }
          }else
          if(nome.isEmpty() && codigo ==0){
               modelo.addRow(new Object[] {this.listaMedico.get(i).getCrm(),
                                              this.listaMedico.get(i).getNome()}); 
          }
       }
              
       return modelo;
    }
       
    private void zerarModeloPaciente(){
        modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new String[] {"Codigo","Nome"});
    }
    
    private void zerarModeloMedico(){
        modeloMedico = new DefaultTableModel();
        modeloMedico.setColumnIdentifiers(new String[] {"CRM","Nome"});
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBCancelar;
    private javax.swing.JButton JBProcurarMedico;
    private javax.swing.JButton JBProcurarPaciente;
    private javax.swing.JButton JBSalvar;
    private javax.swing.JComboBox JCBProcedimento;
    private javax.swing.JFormattedTextField JFTDataConsulta;
    private javax.swing.JLabel JLCRMedico;
    private javax.swing.JLabel JLCodigoPaciente;
    private javax.swing.JLabel JLDataConsulta;
    private javax.swing.JLabel JLMedico;
    private javax.swing.JLabel JLNomeMedico;
    private javax.swing.JLabel JLNomePaciente;
    private javax.swing.JLabel JLProcedimento;
    private javax.swing.JPanel JPPainelPrincipal;
    private javax.swing.JPanel JPainelMedico;
    private javax.swing.JPanel JPainelPaciente;
    private javax.swing.JScrollPane JSPMedico;
    private javax.swing.JScrollPane JSPPaciente;
    private javax.swing.JTextArea JTAObservacao;
    private javax.swing.JTextField JTFCRM;
    private javax.swing.JTextField JTFCodigoPaciente;
    private javax.swing.JTextField JTFNomeMedico;
    private javax.swing.JTextField JTFNomePaciente;
    private javax.swing.JTable JTabelaMedico;
    private javax.swing.JTable JTabelaPaciente;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
