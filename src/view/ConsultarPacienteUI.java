/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import controller.PacienteController;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Paciente;

/**
 *
 * @author Lucas
 */
public class ConsultarPacienteUI extends javax.swing.JInternalFrame {

    /**
     * Creates new form ConsultarPaciente2
     */
    
    private List<Paciente> listaPaciente;
    private DefaultTableModel modelo;
 
    public ConsultarPacienteUI() {
        initComponents();
    
        this.zerarLista();
        this.zerarModelo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        JLCodigo = new javax.swing.JLabel();
        JTFCodigo = new javax.swing.JTextField();
        JLNome = new javax.swing.JLabel();
        JTFNome = new javax.swing.JTextField();
        JLCpf = new javax.swing.JLabel();
        JFTFCpf = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTListaPaciente = new javax.swing.JTable();
        JBListar = new javax.swing.JButton();
        JBEditar = new javax.swing.JButton();
        JBAdicionar = new javax.swing.JButton();
        JBRemover = new javax.swing.JButton();
        JBPesquisar = new javax.swing.JButton();

        setClosable(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Consulta de Paciente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        JLCodigo.setText("Codigo: ");

        JLNome.setText("Nome :");

        JLCpf.setText("CPF :");

        try {
            JFTFCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        JTListaPaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "CÃ³digo", "Nome", "CPF"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        JTListaPaciente.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(JTListaPaciente);
        if (JTListaPaciente.getColumnModel().getColumnCount() > 0) {
            JTListaPaciente.getColumnModel().getColumn(0).setMinWidth(70);
            JTListaPaciente.getColumnModel().getColumn(0).setMaxWidth(170);
            JTListaPaciente.getColumnModel().getColumn(1).setMinWidth(250);
            JTListaPaciente.getColumnModel().getColumn(1).setMaxWidth(350);
            JTListaPaciente.getColumnModel().getColumn(2).setMinWidth(100);
            JTListaPaciente.getColumnModel().getColumn(2).setMaxWidth(200);
        }

        JBListar.setText("Listar");
        JBListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBListarActionPerformed(evt);
            }
        });

        JBEditar.setText("Editar");
        JBEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBEditarActionPerformed(evt);
            }
        });

        JBAdicionar.setText("Adicionar");
        JBAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAdicionarActionPerformed(evt);
            }
        });

        JBRemover.setText("Remover");
        JBRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBRemoverActionPerformed(evt);
            }
        });

        JBPesquisar.setText("Pesquisar");
        JBPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(JLCodigo)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(JLNome)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(JTFCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(JLCpf)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(JFTFCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(JBPesquisar))
                            .addComponent(JTFNome, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(JBListar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JBEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JBAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JBRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JTFNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLNome))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLCpf)
                    .addComponent(JFTFCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JTFCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLCodigo)
                    .addComponent(JBPesquisar))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBEditar)
                    .addComponent(JBListar)
                    .addComponent(JBAdicionar)
                    .addComponent(JBRemover))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBListarActionPerformed
        this.zerarModelo();
        for (Paciente listaPaciente1 : listaPaciente) {
            modelo.addRow(new Object[]{listaPaciente1.getCodigo(), listaPaciente1.getNome(), listaPaciente1.getCpf()});
        }
            
        JTListaPaciente.setModel(modelo); 
    }//GEN-LAST:event_JBListarActionPerformed

    private void JBEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBEditarActionPerformed
        this.zerarModelo();
        int codigo;      
        try{
            int index = JTListaPaciente.getSelectedRow();
            if(index >= 0){
                codigo = (int) JTListaPaciente.getValueAt(index,0);
            }else{
                throw new Exception("Nenhum paciente foi selecionado");
            }
            for (Paciente listaPaciente1 : this.listaPaciente) {
                if (codigo == listaPaciente1.getCodigo()) {
                    CadastrarPacienteUI cadastroPaciente = new CadastrarPacienteUI(listaPaciente1);
                    cadastroPaciente.setVisible(true);
                    PrincipalUI.obterInstancia().obterTela().add(cadastroPaciente);
                    cadastroPaciente.toFront();
                }
            }
         }catch(Exception ex){
             JOptionPane.showMessageDialog(this, ex.getMessage());
         }     
    }//GEN-LAST:event_JBEditarActionPerformed

    private void JBAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAdicionarActionPerformed
        CadastrarPacienteUI cadastroPaciente = new CadastrarPacienteUI(null);
        cadastroPaciente.setVisible(true);
        PrincipalUI.obterInstancia().obterTela().add(cadastroPaciente);
        cadastroPaciente.toFront();
    }//GEN-LAST:event_JBAdicionarActionPerformed

    private void JBPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBPesquisarActionPerformed
        this.zerarModelo();
        try{
            JTListaPaciente.setModel(verificarFiltros(modelo));
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Erro: "+e.getMessage(),"ERRO",0);
        } 
    }//GEN-LAST:event_JBPesquisarActionPerformed

    private void JBRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBRemoverActionPerformed
        this.zerarModelo();
        int codigo;      
        try{
            int index = JTListaPaciente.getSelectedRow();
            if(index >= 0){
                codigo = (int) JTListaPaciente.getValueAt(index,0);
            }else{
                throw new Exception("Nenhum paciente foi selecionado");
            }
            for (Paciente listaPaciente1 : this.listaPaciente) {
                if (codigo == listaPaciente1.getCodigo()) {
                   PacienteController.obterInstancia().remover(listaPaciente1.getCodigo());
                }
            }
            
            JOptionPane.showMessageDialog(this, "Removido com sucesso !");
            this.zerarLista();
            this.zerarModelo();
        }catch(Exception ex){
             JOptionPane.showMessageDialog(this, ex.getMessage());
        }     
    }//GEN-LAST:event_JBRemoverActionPerformed

    public DefaultTableModel verificarFiltros(DefaultTableModel modelo) throws Exception{
        String nome = JTFNome.getText();
        String cpf = JFTFCpf.getText();
        Integer codigo;

        this.verificarNome(JTFNome.getText());
        try{
            codigo = Integer.parseInt(JTFCodigo.getText());
        }catch(NumberFormatException e){
            codigo = null;
        }

        if(cpf.equals("   .   .   -  ")){
            cpf = null;
        }

        for (int i=0 ; i < this.listaPaciente.size(); i++) {
            if(nome.isEmpty() && cpf == null && codigo == null){
                modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                            this.listaPaciente.get(i).getNome(),
                                            this.listaPaciente.get(i).getCpf()});
            }else
            if(!nome.isEmpty()){
                if(cpf == null && codigo == null){
                    if(this.listaPaciente.get(i).getNome().contains(nome)){
                      modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                            this.listaPaciente.get(i).getNome(),
                                            this.listaPaciente.get(i).getCpf()});  
                    }
                }else
                if(cpf != null && codigo == null){
                    if(this.listaPaciente.get(i).getNome().contains(nome) &&
                            this.listaPaciente.get(i).getCpf().equals(cpf)){
                        modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                            this.listaPaciente.get(i).getNome(),
                                            this.listaPaciente.get(i).getCpf()});
                    }
                }else
                if(cpf == null && codigo != null){
                    if(this.listaPaciente.get(i).getCodigo().equals(codigo) &&
                            this.listaPaciente.get(i).getNome().contains(nome)){
                        modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                            this.listaPaciente.get(i).getNome(),
                                            this.listaPaciente.get(i).getCpf()});
                    }
                }else
                if(cpf != null && codigo != null){
                    if(this.listaPaciente.get(i).getNome().contains(nome) &&
                            this.listaPaciente.get(i).getCpf().equals(cpf) &&
                                this.listaPaciente.get(i).getCodigo().equals(codigo)){
                        modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                            this.listaPaciente.get(i).getNome(),
                                            this.listaPaciente.get(i).getCpf()});
                    }
                }
            }else
            if(cpf != null){
                if(codigo == null){
                    if(this.listaPaciente.get(i).getCpf().equals(cpf)){
                        modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                            this.listaPaciente.get(i).getNome(),
                                            this.listaPaciente.get(i).getCpf()});
                    }
                }else
                if(codigo != null){
                    if(this.listaPaciente.get(i).getCpf().equals(cpf) &&
                            this.listaPaciente.get(i).getCodigo().equals(codigo)){
                        modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                            this.listaPaciente.get(i).getNome(),
                                            this.listaPaciente.get(i).getCpf()});
                    }
                }
            }else
            if(codigo != null){
                if(this.listaPaciente.get(i).getCodigo().equals(codigo)){
                    modelo.addRow(new Object[] {this.listaPaciente.get(i).getCodigo(),
                                            this.listaPaciente.get(i).getNome(),
                                            this.listaPaciente.get(i).getCpf()});
                }
            }
                
        }

        if(modelo.getRowCount() != 0){
             return modelo;
        } else {
            throw new Exception("Nenhum dado cadastrado, com esses dados");
        }


    }

    private void zerarModelo(){
        modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new String[] {"Codigo","Nome","CPF"});
    }

    private void verificarNome(String paciente) throws Exception{
         for(int i=0;i<paciente.length();i++){
                if(Character.isDigit(paciente.charAt(i))){
                       throw new Exception("Contem numero no nome");
                }
          }
    }
    
    private void zerarLista(){
         try {
            this.listaPaciente = PacienteController.obterInstancia().listarPaciente();
        } catch (Exception ex) {
            Logger.getLogger(ConsultarPacienteUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBAdicionar;
    private javax.swing.JButton JBEditar;
    private javax.swing.JButton JBListar;
    private javax.swing.JButton JBPesquisar;
    private javax.swing.JButton JBRemover;
    private javax.swing.JFormattedTextField JFTFCpf;
    private javax.swing.JLabel JLCodigo;
    private javax.swing.JLabel JLCpf;
    private javax.swing.JLabel JLNome;
    private javax.swing.JTextField JTFCodigo;
    private javax.swing.JTextField JTFNome;
    private javax.swing.JTable JTListaPaciente;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
